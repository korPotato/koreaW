자바스크립트 기초 문법

자바스크립트
제일 중요한것 함수와 객체


웹브라우저 
    - 자바스크립트 해석 엔진

shift + Enter = 다음줄

자바(java)
var 변수; - 값을 담을 수 있는 공간(컴퓨터에서의 공간은 메모리)
    숫자 -> 숫자 : double, long
    문자 -> 문자 -> "값", '값';

var 변수명 = 값;

typeof 변수값의 타입을 알수 있다

연산자
1) 대입 연산자(=)
	var 변수명 = 값;
	var 변수명 = num1 + num2;
	- 연산의 우선순위가 가장 낮다
	
	= 대입이 가장 마지막 발생하는 연산자
	+-... 먼저 발생하는 연산자이다
	
2) 산술 연산자 
	연산자 : 연산에 사용되는 기호
	항 : 연산에 사용되는 값
	  - 단항, 이항, 삼항
	
	+, -, /, *, %(나머지 연산자)
	(10 + 3) * 6 

	(...) -> 가장 우선순위가 높은 연산자
	
	홀수 1, 3, 5, 7, 9 ...
	홀수의 나머지 값은 1
	짝수 2, 4, 6, 8, 10 ...
	짝수의 나머지 값은 0

3) 부호 연산자 (단항)
	+, -
	- (부호 반전)
	음수 -> 양수
	양수 -> 음수

4) 증가감소 연산자(단항)
	1씩 증가, 1씩 감소
	++(증가연산자)
		num++;
		num+num+1;
		
	--(감소 연산자)
		num--;
		num-num-1;

5) 비교연산자
	>, <, >=, <=, ==(값만 비교), !=(다르다)
	
	===	-> 주소가(타입이) 같은지까지 비교
	!==
	
	- 연산의 결과 -> 참, 거짓(true, false)
	
6) 논리연산자
	AND 연산자	: 교집합	
		- A공간과 B공간의 교합되는 경우 ( 둘다 해당해야 하는경우)
		- 두항이 모두 참(true) -> 참
		&&
		
	OR 연산자	: 합집합
		- 두 항 중에서 한개라도 참(true)이면 참(true)
		||
		
	NOT 연산자	: 부정연산
	부정 기호 (!)
	참 -> 거짓
	거짓 -> 참
	

	연산의 결과 -> 참(true), 거짓(false)
	
	비교 > 논리
	 - 논리 보다 비교가 우선
	 
	거짓 : flase
		0, 빈값, null, undefined
		
	참 : true 
		위의 거짓값이 아닌 전부
		
7) 복합 대입 연산자
	=
	산술 + 대입 -> 단항 연산
	num += 2;	// num = num + 2;
	num *= 3; 	// num = num * 3;
	
	
8) 삼항 조건 연산자
	(조건식 ? 참:거짓) => 조건식 ? 참일때 : 거짓일떄;

연산자 우선순위
1. (...)
2. 단항
3. 비교
4. 논리
5. =(대입) 

주석(comment) - 설명 
	- 인터프리터가 해석을 무시...
	
// -> 한줄 주석
/**/ -> 여러줄 주석
- 소스의 실행 배제

console
.log
- 콘솔에 로그를 표시
.dir
.error
.time
.timeEnd

자료형 
  원시타입 자료

	숫자(number) - 실수, 정수
	문자(string)
	논리형(boolean) - true, false
	undefined : 값을 지정하지 않은 상태
	null 값: 값이 비어 있는 상태
	
  객체 자료
	- 자바스크립트에는 함수,배열,클래스 등등 없다. 전부 객체형태이다
	
	배열객체
	함수객체
	
조건문 

선택문
	- 동일 조건
	swich(키워드){
	case "값1":
		// 키워드 == 값 -> 실행
	case "값2":
		//
	case "값3":
		//
	default;
		// 매칭되는 값이 없는 경우
	}
	
반복문
1)
while(조건식){
	// 조건이 참일떄 반복 실행되는 코드	
}
var num = 0, total = 0;
while(num <= 100) {
	total += num;	// total = total + num;
	num++; // num = num + 1;
}
결과 100

2) 
do {
	// 조건식이 참일때 반복 실행되는 코드
} while(조건식);
do {
    total += num;
    num++;
} while(num <= 100);
결과 100
do는 일단 실행을 한다 그후 조건을 확인 한다.

3) 
for(초기화식;  조건식; 증감식;){

}
break -> 반복 완전 중단
continue -> 반복 건너뛰기
/*
var total = 0;

for (var i = 1; i <= 100; i++){
	if(i % 2 == 1){
	total += i;
	}
}


for (var i = 1; i <=100; i++){
    if(i % 2==0){ // 짝수일떄 건너 뛰기
    continue;
    }
    total +=i; // 홀수만 더해진다
}
*/

중첩 반복문 
	반복문 안에 반복문
	관례... i, j, k, l, m

구구단	
for (var i = 2; i<=9; i++){
    console.log("====" + i + "단 ====");
    for(var j= 1; j <= 9; j++){
        console.log(i + " X " + j + " = " + (i *j));
    }
}


	
index - 순서
	컴퓨터는 숫자를 0부터 시작한다.
	0, 1, 2, 3, 4, 5, 6,7, ...
	

ES5
	V8
ECMAScript 6 부터 추가된 데이터 타입
1. 심벌 - 심벌은 ECMAScript6 부터 추가된 원시 값입니다.
	   - 심벌은 자기 자신을 제외한 그 어떤 값과도 다른 유일무의한 값입니다.
	Symbol -> 유일한 값(중복)
	Symbol("값");
		.for(키값)
	Enum;
2. 샘플릿 리터럴
``
''
""

보간 표현법(placeholder)
${변수}

템플릿 함수


\n -> new Line - 줄개행
\t -> 탭키
\b -> back space 
\r -> 문잔 첫번쨰

객체 리터럴
사물,대상(Object)
	- 특징
	- 행위
	
자동차
 특징
 - 엔진 
 - 연료
 - 파워트레인...
 
 행위 - 움직인다.
 
쇼핑몰 
회원
 특징
 - 아이디
 - 회원명
 - 적립금..
 행위
 - 로그인
 - 주문 .. 등등
 
상품
주문

객체간 상호작용
	특징(변수,속성), 행위(함수)


1. 객체 리터럴이란?
- 객체는 이름과 값을 한쌍을 묶은 데이터를 여러개 모은 것
- 즉, 객체는 데이터 여러개를 하나로 모은 복합 데이터로 연관배열 또는 사전(Diction) 이라고 부릅니다.
이름	값
suit	"하트"
rank	"A"
- 객체에 포함된 데이터 하나(이름과 값의 쌍)를 가리켜 객체의 프로퍼티라고 부른다
- 프로퍼티 이름 부분을 “프로퍼티 이름” 또는 “키”라고 부릅니다.
- 객체를 생성하는 방법 2가지 : 객체 리터럴 사용, 생성자 함수 사용

{} -> 객체 
{
	속성명:값,
	속성명:값,
	속성명:값
}
객체의 값에 접근
- 참조변수.속성명; 
- 참조변수['속성명']


JSON - JavaScript Object Notation (자바크스립트 객체 표기법)
 -자바스크립트의 형태로 표기한것.
 
 
var person = {} - 객체가 저장되는 메모리 -> 주소;

person - 주소
-> 참조변수

객체의 없는 값을 추가 하면 추가가 가능하다.
person.address(추가하고싶은속성명) = "값";

객체 안의 제거 하고싶은 속성
delete 참조변수.속성명;


값
 - 원시타입 (숫자, 문자, 논리값, null,m nudefined)
 - 객체

메서드

변수 선언 
창의 탭을 새로 클릭할때마다 
window
	모든 변수, 모든 함수
	
	
var a = 10;

window.a = undefined
window.a = 10;

호이스팅(hoisting) - 값, 함수 
- 선언이 먼저 메모리에 저장되었다 것을 의미.

위치와 상관없이 window객체로 끌어올려진다.
- 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미합니다.
- var 로 선언한 변수의 경우 호이스팅 시 undefined 로 변수를 초기화한다

함수객체
function 함수명(매개변수, 매개변수 ...){
	// 함수 실행 코드
	
	return 반환값;
}

함수 객체 -> 값
	-> 함수의 매개변수, 반환값
	
함수 객체 -> 실행 가능 X

outer()
- 함수 객체를 재구성한 EC(Execution Context)객체 생성 -> 실행(스택)-> 제거

EC{
	내부변수 - 원시값
	내부변수 - 참조값(객체)
	외부함수의 변수 참조
}

outer EC 객체 {
	변수 ...
	
	외부 함수 참조 : hlobal EC
	this 바인딩 : window 
	
	}


inner EC 객체{ 
	num2
	result
	
	외부 함수 변수 참조 : outer.num1...
	
	*** this 바인딩 : 함수를 호출한 객체가 this이다.
}
실행

global EC 
	변수 -> window 하위 속성
	
	외부 참조 : null
	this 바인딩 : window

외부 함수의 변수 참조 -> 유효범위 체인 (Scope)
	
전역변수

지역변수 - 함수 지역 내에서 유효한 변수값의

- 지역변수는 상대적인 개념
- 함수 안의 외부 변수 참조(유효범위체인)
- 변수가 현재 범위에 없으면 외부 참조까지 이동
- 있으면 현재 범위 변수를 사용

전용 메모리 공간을 힙

함수객체 -> 일급 객체
1) 객체 -> 객체
2) 매개변수
3) 반환값

익명합수 : 함수명이 없는 함수 객체

var
	- 유효범위 - 함수 범위
ES6+

let, const
- 같은 변수 선언 X
- 유효범위{...} - 중괄호안이 범위이다.

let - 변수
const - 상수 : 값 변경X

변수 선언시 -> const


	
2. 객체 리터럴로 객체 생성하기
3. 프로퍼티 추가와 삭제
4. in 연산자로 프로퍼티가 있는지 확인하기
5. 메서드
6. 객체는 참조 타입


for(초기화식; 조건식; 증감형){
	
}

in : 객체의 속성명이 있는지 체크하는 연산자
for(속성명 in 객체){
	
}

함수객체
1.
2.
3.매개변수
4. 함수의 실행흐름
5. 함수 선언문의 끌어올림
6. 값으로서의함수
7. 변수의 유효범위
8. 블록 유효 범위 : let 과 const 
9. 함수 리터럴로 함수 정의하기
	

10. 객체의 메서드
함수가 객체에 정의되면 명칭을 메서드라고 한다.
ES6+; 
1. 단축된 함수명
2. 화살표 함수
11. 즉시실행함수
(function() {
	//실행코드
})();

12. 가변길이인수 목록(Arguments객체)
	arguments 지역변수(ES5)
	...변수명 -> 가변 매개변수(ES6+)